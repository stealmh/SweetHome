//
//  ChatDetailViewModel.swift
//  SweetHome
//
//  Created by ÍπÄÎØºÌò∏ on 8/25/25.
//

import Foundation
import RxSwift
import RxCocoa

class ChatDetailViewModel: ViewModelable {
    let disposeBag = DisposeBag()
    private let apiClient = ApiClient()
    private let socketManager: ChatSocketManager = { return ChatSocketManager.shared }()
    private let localRepository = ChatCoreDataRepository()
    private let chatMessagesRelay = BehaviorSubject<[LastChat]>(value: [])
    private let otherUserNameRelay = BehaviorSubject<String?>(value: nil)
    private let uploadedFilesRelay = BehaviorSubject<[String]>(value: [])
    
    init() {
        _ = socketManager
    }
    
    struct Input {
        let onAppear: Observable<Void>
        let roomId: String
        let sendMessage: Observable<String>
        let sendPhotos: Observable<Void>
        let viewWillDisappear: Observable<Void>
    }
    
    struct Output: ViewModelLoadable, ViewModelErrorable {
        let isLoading: Driver<Bool>
        let chatMessages: Driver<[LastChat]>
        let error: Driver<SHError>
        let messageSent: Driver<Void>
        let socketConnectionStatus: Driver<SocketConnectionStatus>
        let otherUserName: Driver<String?>
        let showPhotoPicker: Driver<Void>
        let photosUploaded: Driver<Void>
    }
    
    func transform(input: Input) -> Output {
        
        let isLoadingRelay = BehaviorSubject<Bool>(value: false)
        let errorRelay = PublishSubject<SHError>()
        let messageSentRelay = PublishSubject<Void>()
        let photosUploadedRelay = PublishSubject<Void>()
        
        setupSocketConnection(
            roomId: input.roomId,
            onAppear: input.onAppear,
            viewWillDisappear: input.viewWillDisappear
        )
        
        input.onAppear
            .do(onNext: { _ in isLoadingRelay.onNext(true) })
            .flatMapLatest { [weak self] _ -> Observable<[LastChat]> in
                guard let self else { return .empty() }
                return self.loadChatMessagesWithIncrementalSync(roomId: input.roomId)
            }
            .do(onNext: { [weak self] messages in 
                isLoadingRelay.onNext(false)
                // Ï±ÑÌåÖÎ∞© ÏßÑÏûÖ Ïãú ÏùΩÏùå Ï≤òÎ¶¨
                self?.handleRoomEnter(roomId: input.roomId, messages: messages)
            })
            .subscribe(onNext: { [weak self] messages in
                self?.chatMessagesRelay.onNext(messages)
                self?.updateOtherUserName(from: messages)
            }, onError: { error in
                isLoadingRelay.onNext(false)
                errorRelay.onNext(SHError.from(error))
            })
            .disposed(by: disposeBag)
        
        input.sendMessage
            .filter { !$0.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty }
            .do(onNext: { _ in isLoadingRelay.onNext(true) })
            .flatMapLatest { [weak self] message -> Observable<Void> in
                guard let self else { return .empty() }
                let files = (try? self.uploadedFilesRelay.value()) ?? []
                let sendChat = SendChat(content: message, files: files.isEmpty ? nil : files)
                return self.apiClient.requestObservable(ChatEndpoint.sendMessage(room_id: input.roomId, model: sendChat))
                    .map { (_: LastChatResponse) in
                        // Î©îÏãúÏßÄ Ï†ÑÏÜ° ÌõÑ ÏóÖÎ°úÎìúÎêú ÌååÏùº Î™©Î°ù Ï¥àÍ∏∞Ìôî
                        self.uploadedFilesRelay.onNext([])
                        return ()
                    }
            }
            .do(onNext: { _ in isLoadingRelay.onNext(false) })
            .subscribe(onNext: { _ in
                messageSentRelay.onNext(())
            }, onError: { error in
                isLoadingRelay.onNext(false)
                errorRelay.onNext(SHError.from(error))
            })
            .disposed(by: disposeBag)
        
        socketManager.messageReceived
            .filter { $0.room_id == input.roomId }
            .subscribe(onNext: { [weak self] socketMessage in
                self?.handleNewSocketMessage(socketMessage)
            })
            .disposed(by: disposeBag)
        
        socketManager.error
            .subscribe(onNext: { error in
                //TODO: ERROR TYPE Î™ÖÏãú
                //                errorRelay.onNext(SHError.from(error))
            })
            .disposed(by: disposeBag)
        
        return Output(
            isLoading: isLoadingRelay.asDriver(onErrorDriveWith: .empty()),
            chatMessages: chatMessagesRelay.asDriver(onErrorDriveWith: .empty()),
            error: errorRelay.asDriver(onErrorDriveWith: .empty()),
            messageSent: messageSentRelay.asDriver(onErrorDriveWith: .empty()),
            socketConnectionStatus: socketManager.connectionStatus.asDriver(onErrorDriveWith: .empty()),
            otherUserName: otherUserNameRelay.asDriver(onErrorDriveWith: .empty()),
            showPhotoPicker: input.sendPhotos.asDriver(onErrorDriveWith: .empty()),
            photosUploaded: photosUploadedRelay.asDriver(onErrorDriveWith: .empty())
        )
    }
    
    private func setupSocketConnection(roomId: String, onAppear: Observable<Void>, viewWillDisappear: Observable<Void>) {
        let userId = KeyChainManager.shared.read(.userID) ?? ""
        guard !userId.isEmpty else { return }
        
        onAppear
            .subscribe(onNext: { [weak self] _ in
                self?.socketManager.connect(userId: userId)
                self?.socketManager.joinRoom(roomId: roomId)
            })
            .disposed(by: disposeBag)
        
        viewWillDisappear
            .subscribe(onNext: { [weak self] _ in
                // Ï±ÑÌåÖÎ∞© Ìá¥Ïû• Ïãú Ï≤òÎ¶¨
                self?.handleRoomExit(roomId: roomId)
            })
            .disposed(by: disposeBag)
    }
    
    // MARK: - Room Enter/Exit Handling
    
    private func handleRoomEnter(roomId: String, messages: [LastChat]) {
        print("üö™ [Ï±ÑÌåÖÎ∞© ÏßÑÏûÖ] Ï±ÑÌåÖÎ∞© ÏßÑÏûÖ Ï≤òÎ¶¨ ÏãúÏûë: \(roomId)")
        
        // Ï±ÑÌåÖÎ∞© ÏßÑÏûÖ Ïãú ÏùΩÏùå Ï≤òÎ¶¨ - NotificationManagerÏóê ÏùºÏûÑÌïòÏó¨ Ï∂©Îèå Î∞©ÏßÄ
        if let lastMessage = messages.last {
            print("   - ÎßàÏßÄÎßâ Î©îÏãúÏßÄÍπåÏßÄ ÏùΩÏùå Ï≤òÎ¶¨: \(lastMessage.chatId)")
            
            // NotificationManagerÏóêÏÑú ÌÜµÌï© ÏùΩÏùå Ï≤òÎ¶¨ (Î©îÏãúÏßÄ ÏùΩÏùå + ÏïàÏùΩÏùå Ïπ¥Ïö¥Ìä∏ Î¶¨ÏÖã + lastPushMessage ÌÅ¥Î¶¨Ïñ¥)
            NotificationManager.shared.markRoomAsRead(roomId)
            print("   - ÌÜµÌï© ÏùΩÏùå Ï≤òÎ¶¨ ÏôÑÎ£å")
        }
        
        print("   - ‚úÖ Ï±ÑÌåÖÎ∞© ÏßÑÏûÖ Ï≤òÎ¶¨ ÏôÑÎ£å")
    }
    
    // MARK: - Room Exit Handling
    
    private func handleRoomExit(roomId: String) {
        print("üö™ [Ï±ÑÌåÖÎ∞© Ìá¥Ïû•] Ï±ÑÌåÖÎ∞© Ìá¥Ïû• Ï≤òÎ¶¨ ÏãúÏûë: \(roomId)")
        
        // 1. ÏÜåÏºìÏóêÏÑú Ï±ÑÌåÖÎ∞© Ìá¥Ïû•
        socketManager.leaveRoom(roomId: roomId)
        print("   - ÏÜåÏºì Î∞© Ìá¥Ïû• ÏôÑÎ£å")
        
        // 2. ÌòÑÏû¨ ÌëúÏãúÎêú Î©îÏãúÏßÄÎì§ Ï§ë ÎßàÏßÄÎßâ Î©îÏãúÏßÄÍπåÏßÄ ÏùΩÏùå Ï≤òÎ¶¨
        do {
            let currentMessages = try chatMessagesRelay.value()
            if let lastMessage = currentMessages.last {
                print("   - ÎßàÏßÄÎßâ Î©îÏãúÏßÄÍπåÏßÄ ÏùΩÏùå Ï≤òÎ¶¨: \(lastMessage.chatId)")
                
                // NotificationManagerÏóêÏÑú ÌÜµÌï© ÏùΩÏùå Ï≤òÎ¶¨ (Ï∂©Îèå Î∞©ÏßÄ)
                NotificationManager.shared.markRoomAsRead(roomId)
                print("   - ÌÜµÌï© ÏùΩÏùå Ï≤òÎ¶¨ ÏôÑÎ£å")
            }
        } catch {
            print("   - ÌòÑÏû¨ Î©îÏãúÏßÄ Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®: \(error)")
        }
        
        // 3. Î°úÏª¨ ÏµúÏã† Î©îÏãúÏßÄÏôÄ Ï±ÑÌåÖÎ∞© Î™©Î°ù ÎèôÍ∏∞Ìôî
        DispatchQueue.main.async {
            // Ï±ÑÌåÖÎ∞© Î™©Î°ù Ï¶âÏãú ÏÉàÎ°úÍ≥†Ïπ® (Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò)
            NotificationCenter.default.post(
                name: .Chat.newMessageReceived,
                object: nil,
                userInfo: ["roomId": roomId, "action": "roomExit"]
            )
            print("   - Ï±ÑÌåÖÎ∞© Î™©Î°ù Î°úÏª¨ ÎèôÍ∏∞Ìôî Ìä∏Î¶¨Í±∞ ÏôÑÎ£å")
        }
        
        // 4. Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ï¶ùÎ∂Ñ ÎèôÍ∏∞Ìôî (ÏÑ†ÌÉùÏ†Å)
        performIncrementalSync(roomId: roomId)
            .subscribe(onNext: {
                print("   - Î∞±Í∑∏ÎùºÏö¥Îìú Ï¶ùÎ∂Ñ ÎèôÍ∏∞Ìôî ÏôÑÎ£å")
            }, onError: { error in
                print("   - Î∞±Í∑∏ÎùºÏö¥Îìú Ï¶ùÎ∂Ñ ÎèôÍ∏∞Ìôî Ïã§Ìå®: \(error)")
            })
            .disposed(by: disposeBag)
        
        print("   - ‚úÖ Ï±ÑÌåÖÎ∞© Ìá¥Ïû• Ï≤òÎ¶¨ ÏôÑÎ£å")
    }
    
    private func handleNewSocketMessage(_ response: LastChatResponse) {
        let newMessage = response.toDomain()
        
        localRepository.saveChatMessage(newMessage)
            .flatMap { [weak self] _ -> Observable<[LastChat]> in
                guard let self else { return .empty() }
                return self.localRepository.fetchChatMessages(for: newMessage.roomId)
            }
            .subscribe(onNext: { [weak self] updateMessages in
                self?.chatMessagesRelay.onNext(updateMessages)
            })
            .disposed(by: disposeBag)
    }
    
    private func refreshMessages(roomId: String) {
        // refreshMessagesÎäî Îçî Ïù¥ÏÉÅ ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏùå (Ï¶ùÎ∂Ñ ÎèôÍ∏∞ÌôîÎ°ú ÎåÄÏ≤¥)
        performIncrementalSync(roomId: roomId)
            .subscribe()
            .disposed(by: disposeBag)
    }
    
    private func updateOtherUserName(from messages: [LastChat]) {
        let currentUserId = KeyChainManager.shared.read(.userID) ?? ""
        let otherUserMessage = messages.first { $0.sender.userId != currentUserId }
        otherUserNameRelay.onNext(otherUserMessage?.sender.nickname)
    }
    
    // MARK: - Ï¶ùÎ∂Ñ ÎèôÍ∏∞Ìôî Î°úÏßÅ
    
    /// Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ Ïö∞ÏÑ† Î°úÎìú ‚Üí ÏÑúÎ≤ÑÏôÄ Ï¶ùÎ∂Ñ ÎèôÍ∏∞Ìôî
    private func loadChatMessagesWithIncrementalSync(roomId: String) -> Observable<[LastChat]> {
        return localRepository.fetchChatMessages(for: roomId)
            .do(onNext: { [weak self] localMessages in
                // Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ï¶ùÎ∂Ñ ÎèôÍ∏∞Ìôî Ìï≠ÏÉÅ ÏàòÌñâ
                self?.performIncrementalSync(roomId: roomId)
                    .subscribe()
                    .disposed(by: self?.disposeBag ?? DisposeBag())
            })
    }
    
    /// Ï¶ùÎ∂Ñ ÎèôÍ∏∞Ìôî ÏàòÌñâ (ÎßàÏßÄÎßâ Î©îÏãúÏßÄ ÎÇ†Ïßú Ïù¥ÌõÑ Î©îÏãúÏßÄÎßå Í∞ÄÏ†∏Ïò§Í∏∞)
    private func performIncrementalSync(roomId: String) -> Observable<Void> {
        return localRepository.getLastMessageDate(for: roomId)
            .flatMap { [weak self] lastMessageDate -> Observable<Void> in
                guard let self else { return .empty() }
                
                let nextDateString: String? = lastMessageDate.flatMap { data in
                    let formatter = ISO8601DateFormatter()
                    formatter.timeZone = TimeZone(identifier: "UTC")
                    return formatter.string(from: data)
                }

                
                // ÎßàÏßÄÎßâ Î©îÏãúÏßÄ ÎÇ†Ïßú Ïù¥ÌõÑ Î©îÏãúÏßÄ ÏöîÏ≤≠
                return self.apiClient.requestObservable(ChatEndpoint.messageRead(room_id: roomId, next: nextDateString))
                    .map { (response: ChatDetailResponse) in
                        response.data.compactMap { $0.toDomain() }
                    }
                    .flatMap { newMessages -> Observable<Void> in
                        guard !newMessages.isEmpty else { return .just(()) }
                        
                        // ÏÉà Î©îÏãúÏßÄÎì§ Î°úÏª¨ Ï†ÄÏû•
                        return self.localRepository.saveChatMessages(newMessages)
                            .flatMap { _ -> Observable<[LastChat]> in
                                self.localRepository.fetchChatMessages(for: roomId)
                            }
                            .do(onNext: { [weak self] updatedMessages in
                                self?.chatMessagesRelay.onNext(updatedMessages)
                            })
                            .map { _ in () }
                    }
                    .catch { error in
                        // ÏóêÎü¨Í∞Ä Î∞úÏÉùÌï¥ÎèÑ Í≥ÑÏÜç ÏßÑÌñâ
                        print("Ï¶ùÎ∂Ñ ÎèôÍ∏∞Ìôî Ïã§Ìå®: \(error)")
                        return .just(())
                    }
            }
    }
    
    func uploadPhotos(_ imageDatas: [Data], roomId: String) {
        guard !imageDatas.isEmpty else { return }
        
        let userId = KeyChainManager.shared.read(.userID) ?? ""
        let timestamp = Int(Date().timeIntervalSince1970)
        var multipartData: [MultipartFormData] = []
        
        for (index, imageData) in imageDatas.enumerated() {
            let fileName = "\(userId)_\(timestamp)_\(index).jpg"
            let formData = MultipartFormData(
                data: imageData,
                name: "files",
                fileName: fileName,
                mimeType: "image/jpeg"
            )
            multipartData.append(formData)
        }
        
        apiClient.uploadObservable(ChatEndpoint.chatFiles(room_id: roomId, files: multipartData))
            .flatMap { [weak self] (response: ChatUploadResponse) -> Observable<Void> in
                guard let self else { return .empty() }
                let sendChat = SendChat(content: "ÏÇ¨ÏßÑ", files: response.files)
                return self.apiClient.requestObservable(ChatEndpoint.sendMessage(room_id: roomId, model: sendChat))
                    .map { (_: LastChatResponse) in () }
            }
            .subscribe(onNext: { _ in
                print("ÏÇ¨ÏßÑ Ï†ÑÏÜ° ÏôÑÎ£å")
            }, onError: { error in
                print("ÏÇ¨ÏßÑ ÏóÖÎ°úÎìú/Ï†ÑÏÜ° Ïã§Ìå®: \(error)")
            })
            .disposed(by: disposeBag)
    }
}
